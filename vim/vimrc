call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'itchyny/lightline.vim'
Plug 'bling/vim-bufferline'
Plug 'Shougo/neocomplete.vim'
Plug 'tpope/vim-fugitive'
Plug 'w0rp/ale'
Plug 'lervag/vimtex', { 'for': 'tex' }
Plug 'sheerun/vim-polyglot'
Plug 'sjl/gundo.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'mhinz/vim-janah'
Plug 'vim-scripts/LanguageTool', { 'for': 'tex' }
Plug 'beloglazov/vim-online-thesaurus', { 'for': 'tex' }
Plug 'majutsushi/tagbar'
Plug 'airblade/vim-gitgutter'
" Snippet support (next two plugins)
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'Raimondi/delimitMate'
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'mhinz/vim-startify'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
" Requires https://github.com/ryanoasis/nerd-fonts.git
Plug 'ryanoasis/vim-devicons'
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'ayu-theme/ayu-vim'
"Plug 'ajh17/Spacegray.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
call plug#end()

set number       " Turn on line numbering
set ic           " Case insensitive search
set smartcase    " Ignore case insensitive search if upper case characters exist
set showtabline=2
set hidden       " Be able to switch buffers without saving
set mouse=nvi    " Enable mouse
set mousemodel=popup
set lazyredraw   " Redraw less
"set cursorline   " Highlight current line (may make vim slow)
set modeline     " Allow per-file settings
set tabstop=4    " Smaller tab size
set shiftwidth=4 " Smaller tab size
set autowrite
set hlsearch     " Highlight search results
" Visible elements
set list
set listchars=tab:▸\ ,extends:❯,precedes:❮
set showbreak=↪
" History and undo
set history=1000
set undofile
set undoreload=10000
set list " Show invisible characters
" Backups
set backup
set noswapfile

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

set encoding=UTF-8

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
	call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
	call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
	call mkdir(expand(&directory), "p")
endif

" Search colours
"if has("autocmd") && !has("gui_running")
	"hi Search cterm=NONE ctermfg=grey ctermbg=blue
"else
	"hi InSearch guibg=peru guifg=wheat
"endif


""""""""""""""""""""""""
" Plugin Customisation "
""""""""""""""""""""""""

" fzf
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

nnoremap <C-B> :Buffers<cr>
nnoremap <C-M> :Files<cr>
nnoremap <C-N> :Lines<cr>

" download powerline fonts, install them and use one of them in the terminal
set guifont=Monospace\ Regular\ 9
let g:lightline = {
  \   'colorscheme': 'solarized',
  \   'active': {
  \     'left':[ [ 'mode', 'paste', 'spell' ],
  \              [ 'gitbranch', 'filename', 'modified' ]
  \     ],
  \     'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
  \   },
  \   'component': {
  \     'lineinfo': ' %3l:%-2v',
  \   },
  \   'component_function': {
  \     'gitbranch': 'fugitive#head',
  \   },
  \   'tabline': {
  \     'left': [ ['bufferline'] ]
  \   },
  \   'component_expand': {
  \     'bufferline': 'LightlineBufferline',
  \     'linter_warnings': 'LightlineLinterWarnings',
  \     'linter_errors': 'LightlineLinterErrors',
  \     'linter_ok': 'LightlineLinterOK'
  \   },
  \   'component_type': {
  \     'bufferline': 'tabsel',
  \     'readonly': 'error',
  \     'linter_warnings': 'warning',
  \     'linter_errors': 'error'
  \   },
  \ }

" ale
function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
let g:ale_style_error_symbol = '☠'
let g:ale_style_warning_symbol = '☢'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" Fedora
let g:ale_python_flake8_executable = 'python3-flake8'
let g:ale_python_pylint_executable = 'pylint-3'
" Arch
"let g:ale_python_flake8_executable = 'flake8'
"let g:ale_python_pylint_executable = 'pylint'
" Debian
"let g:ale_python_flake8_executable = 'python3 -m pyflakes'
"let g:ale_python_pylint_executable = 'pylint3'

" Disable spell checking in LaTeX comments (makes text more readable)
let g:tex_comment_nospell= 1

" vimtex clientserver
let g:vimtex_compiler_latexmk = {'callback': 1}

" Polyglot
" Disable for LaTeX since I am already using vimtex
let g:polyglot_disabled = ['latex']

" Get rid of bracket matching that slows scrolling down in tex files
let g:vimtex_motion_matchparen = 0

" Other vimtex options
let g:tex_stylish = 1
let g:tex_conceal = ''
let g:tex_isk='48-57,a-z,A-Z,192-255,:'

let g:vimtex_format_enabled = 1
let g:vimtex_complete_img_use_tail = 1

"""""""""""
" Theming "
"""""""""""

set background=dark
if has("gui_running")
  set guioptions=air
  set guioptions-=e
else
  set t_Co=256
endif
if has('termguicolors') && !exists('$TMUX')
  set termguicolors
endif
let ayucolor="dark"
colorscheme ayu

""""""""""""
" My stuff "
""""""""""""

" Spell check in tex files by default
autocmd BufNewFile,BufRead *.tex :call SpellCheckToggle(0)

" Offline Thesaurus in LaTeX
" Ctrl x + Ctrl t (in insert mode)
autocmd BufNewFile,BufRead *.tex set thesaurus+=/usr/share/mythes/th_en_GB_v2.dat
" Debian
"autocmd BufNewFile,BufRead *.tex set thesaurus+=/usr/share/mythes/th_uk_UA_v2.dat
" For online Thesaurus hit \K

" Correct treatment of .tex files
let g:tex_flavor='latex'

" languagetool
" need to fetch languagetool-commandline and put it in a local dir
let g:languagetool_jar='$HOME/.languagetool-cmd/languagetool-commandline.jar'

" Map Ctrl-C to Esc
ino <C-C> <Esc>

" Gundo
nnoremap <F3> :GundoToggle<CR>

" \q redraws the screen and removes any search highlighting
nnoremap <silent> <leader>q :nohlsearch<Bar>:echo<CR>

" Snippet configuration
let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" NERDTree git symbols
let g:NERDTreeIndicatorMapCustom = {
			\ "Modified"  : "✹",
			\ "Staged"    : "✚",
			\ "Untracked" : "✭",
			\ "Renamed"   : "➜",
			\ "Unmerged"  : "═",
			\ "Deleted"   : "✖",
			\ "Dirty"     : "✗",
			\ "Clean"     : "✔︎",
			\ "Unknown"   : "?"
			\ }

" Close vim if NERDTree is the only window left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" gVim specific stuff
if has('gui_running')
	nmap <C-V> "+gP
	imap <C-V> <ESC><C-V>i
	vmap <C-C> "+y
	" Hide the menu
	set guioptions-=T
	" Save using Ctrl + S
	nnoremap <C-S> :update<cr>
	inoremap <C-S> <Esc>:update<cr>gi
endif

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" Using rope makes Python extremely slow. Disabling.
let g:pymode_rope = 0

"****************** configure neocomplete **************************
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_delimiter = 1
let g:neocomplete#enable_auto_close_preview = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
" Select the first suggestion automatically
let g:neocomplete#enable_auto_select = 1

function! s:close_popup_and_complete()
	return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>close_popup_and_complete()<CR>

let g:neocomplete#keyword_patterns = {}
if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.tex =
	\ '\v\\%('
	\ . '\a*cite\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
	\ . '|\a*ref%(\s*\{[^}]*|range\s*\{[^,}]*%(}\{)?)'
	\ . '|hyperref\s*\[[^]]*'
	\ . '|includegraphics\*?%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
	\ . '|%(include%(only)?|input)\s*\{[^}]*'
	\ . '|\a*(gls|Gls|GLS)(pl)?\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
	\ . '|includepdf%(\s*\[[^]]*\])?\s*\{[^}]*'
	\ . '|includestandalone%(\s*\[[^]]*\])?\s*\{[^}]*'
	\ . ')'

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"****************** end configure neocomplete **********************

"""""""""""""
" Shortcuts "
"""""""""""""

" Easy buffer switching
nnoremap <silent> <C-l> :bnext<CR><C-l>
nnoremap <silent> <C-h> :bprevious<CR><C-h>

" Toggle tagbar
nmap <F8> :NERDTreeToggle<CR>
nmap <F9> :TagbarToggle<CR>
nmap <F10> :VimtexTocToggle<CR>
nmap <F12> :VimtexLabelsToggle<CR>

" Close buffer
map <leader>bd :Bclose<cr>

" Indent long XML
" requires xmlindent application
au FileType xml setlocal equalprg=xmlindent\ -t\ 2>/dev/null
au FileType json setlocal equalprg=python\ -m\ json.tool

""""""""""""""""""
" VIM on console "
""""""""""""""""""

if has("autocmd") && !has("gui_running")
	if &term =~ "rxvt-unicode-256color" || &term =~ "xterm-256color" || &term =~ "screen-256color"
		au InsertEnter * silent !echo -ne "\033[6 q"
		au InsertLeave * silent !echo -ne "\033[2 q"
		au VimLeave * silent !echo -ne "\033[2 q"
		"" Konsole
		"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
		"let &t_SR = "\<Esc>]50;CursorShape=2\x7"
		"let &t_EI = "\<Esc>]50;CursorShape=0\x7"
		"" Tmux
		"if exists('$TMUX')
			"let &t_SI = "\ePtmux;\e" . &t_SI . "\e\\"
			"let &t_EI = "\ePtmux;\e" . &t_EI . "\e\\"
		"endif
	endif
endif

" tmux specifics
if exists('$TMUX')
	set ttymouse=xterm2
endif

"""""""""""""
" Functions "
"""""""""""""

" Indent file
function! Reindent()
	let cursor_position = getpos('.')
	normal! H
	let window_position = getpos('.')
	normal gg=G
	call setpos('.', window_position)
	normal! zt
	call setpos('.', cursor_position)
endfunc

nnoremap <silent> <leader>f :call Reindent()<cr>

" Toggle between absolute and relative line numbering
function! NumberToggle()
	if(&relativenumber == 1)
		set norelativenumber
	else
		set relativenumber
	endif
endfunc

nnoremap <C-x> :call NumberToggle()<cr>

" Toggle spell checking
" z= for suggestions
" [s and ]s for prev and next
function! SpellCheckToggle(lang_switch)
	let sp_lang = "en_gb"

	if(a:lang_switch == 1 && $spell_on == 1)
		if($default_lang != 0)
			let $default_lang = 0
			echom "English spell check enabled"
		else
			let sp_lang = "en_gb,el"
			let $default_lang = 1
			echom "Greek/English spell check enabled"
		endif
	endif

	if(($spell_on == 0 && a:lang_switch == 0) || (a:lang_switch == 1 && $spell_on == 1))
		exe "set spell spelllang=" . sp_lang
		"hi clear SpellBad
		"hi SpellBad cterm=underline,bold ctermfg=red ctermbg=9
		let $spell_on = 1
	else
		set nospell
		let $spell_on = 0
	endif
endfunc

nnoremap <silent> <F6> :call SpellCheckToggle(0)<cr>
nnoremap <silent> <F5> :call SpellCheckToggle(1)<cr>

" Change writing language between English and Greek
" Useful because vim wants English for its key-bindings
function! LanguageSwitch()
	if($default_lang != 0)
		set keymap=""
		let $default_lang = 0
		echom "English keyboard enabled"
	else
		set keymap=greek_utf-8
		let $default_lang = 1
		echom "Greek keyboard enabled"
	endif
endfunc

nnoremap <silent> <F4> :call LanguageSwitch()<cr>

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
	let l:currentBufNum = bufnr("%")
	let l:alternateBufNum = bufnr("#")

	if buflisted(l:alternateBufNum)
		buffer #
	else
		bnext
	endif

	if bufnr("%") == l:currentBufNum
		new
	endif

	if buflisted(l:currentBufNum)
		execute("bdelete! ".l:currentBufNum)
	endif
endfunction

function! LightlineBufferline()
  call bufferline#refresh_status()
  return [ g:bufferline_status_info.before, g:bufferline_status_info.current, g:bufferline_status_info.after]
endfunction

" Show ALE messages in a pane
function! LinterStatus() abort
	let l:counts = ale#statusline#Count(bufnr(''))

	let l:all_errors = l:counts.error + l:counts.style_error
	let l:all_non_errors = l:counts.total - l:all_errors

	return l:counts.total == 0 ? 'OK' : printf(
				\   '%dW %dE',
				\   all_non_errors,
				\   all_errors
				\)
endfunction

set statusline=%{LinterStatus()}
