" Disable vi compatibility, if for some reason it's on.
if &compatible
	set nocompatible
endif

set backspace=indent,eol,start

" Disable completing keywords in included files (e.g., #include in C).  When
" configured properly, this can result in the slow, recursive scanning of
" hundreds of files of dubious relevance.
set complete-=i
set smarttab

set nrformats-=octal

" Make the escape key more responsive by decreasing the wait time for an
" escape sequence (e.g., arrow keys).
if &ttimeoutlen == -1
	set ttimeout
	set ttimeoutlen=100
endif

if has('reltime')
	set incsearch
endif

set laststatus=2
set ruler
set wildmenu

set scrolloff=1
set sidescroll=1
set sidescrolloff=2
set display+=lastline
if has('patch-7.4.2109')
	set display+=truncate
endif

set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

" Delete comment character when joining commented lines.
if v:version > 703 || v:version == 703 && has("patch541")
	set formatoptions+=j
endif

" Replace the check for a tags file in the parent directory of the current
" file with a check in every ancestor directory.
if has('path_extra') && (',' . &g:tags . ',') =~# ',\./tags,'
	setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

set autoread

set history=1000
set tabpagemax=50

" Persist g:UPPERCASE variables, used by some plugins, in .viminfo.
if !empty(&viminfo)
	set viminfo^=!
endif
" Saving options in session and view files causes more problems than it
" solves, so disable it.
set sessionoptions-=options
set viewoptions-=options

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^Eterm'
	set t_Co=16
endif

" If the running Vim lacks support for the Fish shell, use Bash instead.
if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))
	set shell=/usr/bin/env\ bash
endif

" Disable a legacy behavior that can break plugin maps.
if has('langmap') && exists('+langremap') && &langremap
	set nolangremap
endif

if !(exists('g:did_load_filetypes') && exists('g:did_load_ftplugin') && exists('g:did_indent_on'))
	filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
	syntax enable
endif

if empty(mapcheck('<C-U>', 'i'))
	inoremap <C-U> <C-G>u<C-U>
endif
if empty(mapcheck('<C-W>', 'i'))
	inoremap <C-W> <C-G>u<C-W>
endif

" From `:help :DiffOrig`.
if exists(":DiffOrig") != 2
	command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
				\ | diffthis | wincmd p | diffthis
endif

" Correctly highlight $() and other modern affordances in filetype=sh.
if !exists('g:is_posix') && !exists('g:is_bash') && !exists('g:is_kornshell') && !exists('g:is_dash')
	let g:is_posix = 1
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
	runtime! macros/matchit.vim
endif

" Enable the :Man command shipped inside Vim's man filetype plugin.
if exists(':Man') != 2 && !exists('g:loaded_man') && &filetype !=? 'man'
	runtime ftplugin/man.vim
endif

set number       " Turn on line numbering
set ic           " Case insensitive search
set smartcase    " Ignore case insensitive search if upper case characters exist
set hidden       " Be able to switch buffers without saving
set mouse=nvi    " Enable mouse
set lazyredraw   " Redraw less
set modeline     " Allow per-file settings
set tabstop=4    " Smaller tab size
set shiftwidth=4 " Smaller tab size
set showbreak=â†ª

" Theming
set background=dark
hi Search cterm=NONE ctermfg=black ctermbg=yellow

" Map Ctrl-C to Esc
ino <C-C> <Esc>

" \q redraws the screen and removes any search highlighting
nnoremap <silent> <leader>q :nohlsearch<Bar>:echo<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" Easy buffer switching
nnoremap <silent> <C-l> :bnext<CR><C-l>
nnoremap <silent> <C-h> :bprevious<CR><C-h>

" Close buffer
map <leader>bd :Bclose<cr>

" Indent file
function! Reindent()
	let cursor_position = getpos('.')
	normal! H
	let window_position = getpos('.')
	normal gg=G
	call setpos('.', window_position)
	normal! zt
	call setpos('.', cursor_position)
endfunc

nnoremap <silent> <leader>f :call Reindent()<cr>

" Toggle between absolute and relative line numbering
function! NumberToggle()
	if(&relativenumber == 1)
		set norelativenumber
	else
		set relativenumber
	endif
endfunc

nnoremap <C-x> :call NumberToggle()<cr>

" Toggle spell checking
" z= for suggestions
" [s and ]s for prev and next
function! SpellCheckToggle()
	if (&spell == 0)
		set spell spelllang=en_gb
		echo "Spell check enabled"
	else
		set nospell
		echo "Spell check disabled"
	endif
endfunc

nnoremap <silent> <F6> :call SpellCheckToggle()<cr>

" Change writing language between English and Greek
" Useful because vim wants English for its key-bindings
function! LanguageSwitch()
	if($default_lang != 0)
		set keymap=""
		let $default_lang = 0
		echom "English keyboard enabled"
	else
		set keymap=greek_utf-8
		let $default_lang = 1
		echom "Greek keyboard enabled"
	endif
endfunc

nnoremap <silent> <F4> :call LanguageSwitch()<cr>

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
	let l:currentBufNum = bufnr("%")
	let l:alternateBufNum = bufnr("#")

	if buflisted(l:alternateBufNum)
		buffer #
	else
		bnext
	endif

	if bufnr("%") == l:currentBufNum
		new
	endif

	if buflisted(l:currentBufNum)
		execute("bdelete! ".l:currentBufNum)
	endif
endfunction
